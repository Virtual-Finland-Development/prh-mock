/*
 * PRH mock API
 *
 * API definition for PRH mock API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrhApi.Models.CodeGen.Client.OpenAPIDateConverter;

namespace PrhApi.Models.CodeGen.Model
{
    /// <summary>
    /// Shareholder
    /// </summary>
    [DataContract(Name = "Shareholder")]
    public partial class Shareholder : IEquatable<Shareholder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shareholder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shareholder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shareholder" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="ownerships">ownerships.</param>
        public Shareholder(string name = default(string), List<Ownership> ownerships = default(List<Ownership>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Shareholder and cannot be null");
            }
            this.Name = name;
            this.Ownerships = ownerships;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Ownerships
        /// </summary>
        [DataMember(Name = "ownerships", EmitDefaultValue = false)]
        public List<Ownership> Ownerships { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shareholder {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ownerships: ").Append(Ownerships).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shareholder);
        }

        /// <summary>
        /// Returns true if Shareholder instances are equal
        /// </summary>
        /// <param name="input">Instance of Shareholder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shareholder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ownerships == input.Ownerships ||
                    this.Ownerships != null &&
                    input.Ownerships != null &&
                    this.Ownerships.SequenceEqual(input.Ownerships)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Ownerships != null)
                {
                    hashCode = (hashCode * 59) + this.Ownerships.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 250.", new [] { "Name" });
            }

            yield break;
        }
    }

}
