/*
 * PRH mock API
 *
 * API definition for PRH mock API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrhApi.Models.CodeGen.Client.OpenAPIDateConverter;

namespace PrhApi.Models.CodeGen.Model
{
    /// <summary>
    /// EstablishmentResponse
    /// </summary>
    [DataContract(Name = "EstablishmentResponse")]
    public partial class EstablishmentResponse : IEquatable<EstablishmentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstablishmentResponse" /> class.
        /// </summary>
        /// <param name="registrant">registrant.</param>
        /// <param name="companyDetails">companyDetails.</param>
        /// <param name="shareSeries">shareSeries.</param>
        /// <param name="companyAddress">companyAddress.</param>
        /// <param name="managingDirectors">managingDirectors.</param>
        /// <param name="boardMembers">boardMembers.</param>
        /// <param name="auditorDetails">auditorDetails.</param>
        public EstablishmentResponse(Registrant registrant = default(Registrant), CompanyDetails companyDetails = default(CompanyDetails), List<ShareSeries> shareSeries = default(List<ShareSeries>), CompanyAddress companyAddress = default(CompanyAddress), List<ManagingDirector> managingDirectors = default(List<ManagingDirector>), List<BoardMember> boardMembers = default(List<BoardMember>), Auditor auditorDetails = default(Auditor))
        {
            this.Registrant = registrant;
            this.CompanyDetails = companyDetails;
            this.ShareSeries = shareSeries;
            this.CompanyAddress = companyAddress;
            this.ManagingDirectors = managingDirectors;
            this.BoardMembers = boardMembers;
            this.AuditorDetails = auditorDetails;
        }

        /// <summary>
        /// Gets or Sets Registrant
        /// </summary>
        [DataMember(Name = "registrant", EmitDefaultValue = false)]
        public Registrant Registrant { get; set; }

        /// <summary>
        /// Gets or Sets CompanyDetails
        /// </summary>
        [DataMember(Name = "companyDetails", EmitDefaultValue = false)]
        public CompanyDetails CompanyDetails { get; set; }

        /// <summary>
        /// Gets or Sets ShareSeries
        /// </summary>
        [DataMember(Name = "shareSeries", EmitDefaultValue = false)]
        public List<ShareSeries> ShareSeries { get; set; }

        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [DataMember(Name = "companyAddress", EmitDefaultValue = false)]
        public CompanyAddress CompanyAddress { get; set; }

        /// <summary>
        /// Gets or Sets ManagingDirectors
        /// </summary>
        [DataMember(Name = "managingDirectors", EmitDefaultValue = false)]
        public List<ManagingDirector> ManagingDirectors { get; set; }

        /// <summary>
        /// Gets or Sets BoardMembers
        /// </summary>
        [DataMember(Name = "boardMembers", EmitDefaultValue = false)]
        public List<BoardMember> BoardMembers { get; set; }

        /// <summary>
        /// Gets or Sets AuditorDetails
        /// </summary>
        [DataMember(Name = "auditorDetails", EmitDefaultValue = false)]
        public Auditor AuditorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstablishmentResponse {\n");
            sb.Append("  Registrant: ").Append(Registrant).Append("\n");
            sb.Append("  CompanyDetails: ").Append(CompanyDetails).Append("\n");
            sb.Append("  ShareSeries: ").Append(ShareSeries).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  ManagingDirectors: ").Append(ManagingDirectors).Append("\n");
            sb.Append("  BoardMembers: ").Append(BoardMembers).Append("\n");
            sb.Append("  AuditorDetails: ").Append(AuditorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstablishmentResponse);
        }

        /// <summary>
        /// Returns true if EstablishmentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EstablishmentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstablishmentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Registrant == input.Registrant ||
                    (this.Registrant != null &&
                    this.Registrant.Equals(input.Registrant))
                ) && 
                (
                    this.CompanyDetails == input.CompanyDetails ||
                    (this.CompanyDetails != null &&
                    this.CompanyDetails.Equals(input.CompanyDetails))
                ) && 
                (
                    this.ShareSeries == input.ShareSeries ||
                    this.ShareSeries != null &&
                    input.ShareSeries != null &&
                    this.ShareSeries.SequenceEqual(input.ShareSeries)
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.ManagingDirectors == input.ManagingDirectors ||
                    this.ManagingDirectors != null &&
                    input.ManagingDirectors != null &&
                    this.ManagingDirectors.SequenceEqual(input.ManagingDirectors)
                ) && 
                (
                    this.BoardMembers == input.BoardMembers ||
                    this.BoardMembers != null &&
                    input.BoardMembers != null &&
                    this.BoardMembers.SequenceEqual(input.BoardMembers)
                ) && 
                (
                    this.AuditorDetails == input.AuditorDetails ||
                    (this.AuditorDetails != null &&
                    this.AuditorDetails.Equals(input.AuditorDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Registrant != null)
                {
                    hashCode = (hashCode * 59) + this.Registrant.GetHashCode();
                }
                if (this.CompanyDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyDetails.GetHashCode();
                }
                if (this.ShareSeries != null)
                {
                    hashCode = (hashCode * 59) + this.ShareSeries.GetHashCode();
                }
                if (this.CompanyAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyAddress.GetHashCode();
                }
                if (this.ManagingDirectors != null)
                {
                    hashCode = (hashCode * 59) + this.ManagingDirectors.GetHashCode();
                }
                if (this.BoardMembers != null)
                {
                    hashCode = (hashCode * 59) + this.BoardMembers.GetHashCode();
                }
                if (this.AuditorDetails != null)
                {
                    hashCode = (hashCode * 59) + this.AuditorDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
