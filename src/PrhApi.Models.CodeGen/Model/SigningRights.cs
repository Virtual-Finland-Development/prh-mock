/*
 * PRH mock API
 *
 * API definition for PRH mock API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrhApi.Models.CodeGen.Client.OpenAPIDateConverter;

namespace PrhApi.Models.CodeGen.Model
{
    /// <summary>
    /// SigningRights
    /// </summary>
    [DataContract(Name = "SigningRights")]
    public partial class SigningRights : IEquatable<SigningRights>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningRights" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SigningRights() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningRights" /> class.
        /// </summary>
        /// <param name="personalId">personalId.</param>
        /// <param name="givenName">givenName (required).</param>
        /// <param name="middleNames">middleNames (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        /// <param name="nationality">nationality (required).</param>
        /// <param name="fullAddress">fullAddress (required).</param>
        /// <param name="thoroughfare">thoroughfare.</param>
        /// <param name="locatorDesignator">locatorDesignator.</param>
        /// <param name="locatorName">locatorName.</param>
        /// <param name="addressArea">addressArea.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="postName">postName.</param>
        /// <param name="poBox">poBox.</param>
        /// <param name="adminUnitLevel1">adminUnitLevel1.</param>
        /// <param name="adminUnitLevel2">adminUnitLevel2.</param>
        public SigningRights(string personalId = default(string), string givenName = default(string), string middleNames = default(string), string lastName = default(string), DateTime dateOfBirth = default(DateTime), string nationality = default(string), string fullAddress = default(string), string thoroughfare = default(string), string locatorDesignator = default(string), string locatorName = default(string), string addressArea = default(string), string postCode = default(string), string postName = default(string), string poBox = default(string), string adminUnitLevel1 = default(string), string adminUnitLevel2 = default(string))
        {
            // to ensure "givenName" is required (not null)
            if (givenName == null)
            {
                throw new ArgumentNullException("givenName is a required property for SigningRights and cannot be null");
            }
            this.GivenName = givenName;
            // to ensure "middleNames" is required (not null)
            if (middleNames == null)
            {
                throw new ArgumentNullException("middleNames is a required property for SigningRights and cannot be null");
            }
            this.MiddleNames = middleNames;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for SigningRights and cannot be null");
            }
            this.LastName = lastName;
            this.DateOfBirth = dateOfBirth;
            // to ensure "nationality" is required (not null)
            if (nationality == null)
            {
                throw new ArgumentNullException("nationality is a required property for SigningRights and cannot be null");
            }
            this.Nationality = nationality;
            // to ensure "fullAddress" is required (not null)
            if (fullAddress == null)
            {
                throw new ArgumentNullException("fullAddress is a required property for SigningRights and cannot be null");
            }
            this.FullAddress = fullAddress;
            this.PersonalId = personalId;
            this.Thoroughfare = thoroughfare;
            this.LocatorDesignator = locatorDesignator;
            this.LocatorName = locatorName;
            this.AddressArea = addressArea;
            this.PostCode = postCode;
            this.PostName = postName;
            this.PoBox = poBox;
            this.AdminUnitLevel1 = adminUnitLevel1;
            this.AdminUnitLevel2 = adminUnitLevel2;
        }

        /// <summary>
        /// Gets or Sets PersonalId
        /// </summary>
        [DataMember(Name = "personalId", EmitDefaultValue = false)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name = "givenName", IsRequired = true, EmitDefaultValue = true)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleNames
        /// </summary>
        [DataMember(Name = "middleNames", IsRequired = true, EmitDefaultValue = true)]
        public string MiddleNames { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "dateOfBirth", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name = "nationality", IsRequired = true, EmitDefaultValue = true)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or Sets FullAddress
        /// </summary>
        [DataMember(Name = "fullAddress", IsRequired = true, EmitDefaultValue = true)]
        public string FullAddress { get; set; }

        /// <summary>
        /// Gets or Sets Thoroughfare
        /// </summary>
        [DataMember(Name = "thoroughfare", EmitDefaultValue = false)]
        public string Thoroughfare { get; set; }

        /// <summary>
        /// Gets or Sets LocatorDesignator
        /// </summary>
        [DataMember(Name = "locatorDesignator", EmitDefaultValue = false)]
        public string LocatorDesignator { get; set; }

        /// <summary>
        /// Gets or Sets LocatorName
        /// </summary>
        [DataMember(Name = "locatorName", EmitDefaultValue = false)]
        public string LocatorName { get; set; }

        /// <summary>
        /// Gets or Sets AddressArea
        /// </summary>
        [DataMember(Name = "addressArea", EmitDefaultValue = false)]
        public string AddressArea { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name = "postCode", EmitDefaultValue = false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets PostName
        /// </summary>
        [DataMember(Name = "postName", EmitDefaultValue = false)]
        public string PostName { get; set; }

        /// <summary>
        /// Gets or Sets PoBox
        /// </summary>
        [DataMember(Name = "poBox", EmitDefaultValue = false)]
        public string PoBox { get; set; }

        /// <summary>
        /// Gets or Sets AdminUnitLevel1
        /// </summary>
        [DataMember(Name = "adminUnitLevel1", EmitDefaultValue = false)]
        public string AdminUnitLevel1 { get; set; }

        /// <summary>
        /// Gets or Sets AdminUnitLevel2
        /// </summary>
        [DataMember(Name = "adminUnitLevel2", EmitDefaultValue = false)]
        public string AdminUnitLevel2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SigningRights {\n");
            sb.Append("  PersonalId: ").Append(PersonalId).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  MiddleNames: ").Append(MiddleNames).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  FullAddress: ").Append(FullAddress).Append("\n");
            sb.Append("  Thoroughfare: ").Append(Thoroughfare).Append("\n");
            sb.Append("  LocatorDesignator: ").Append(LocatorDesignator).Append("\n");
            sb.Append("  LocatorName: ").Append(LocatorName).Append("\n");
            sb.Append("  AddressArea: ").Append(AddressArea).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  PostName: ").Append(PostName).Append("\n");
            sb.Append("  PoBox: ").Append(PoBox).Append("\n");
            sb.Append("  AdminUnitLevel1: ").Append(AdminUnitLevel1).Append("\n");
            sb.Append("  AdminUnitLevel2: ").Append(AdminUnitLevel2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigningRights);
        }

        /// <summary>
        /// Returns true if SigningRights instances are equal
        /// </summary>
        /// <param name="input">Instance of SigningRights to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigningRights input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PersonalId == input.PersonalId ||
                    (this.PersonalId != null &&
                    this.PersonalId.Equals(input.PersonalId))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.MiddleNames == input.MiddleNames ||
                    (this.MiddleNames != null &&
                    this.MiddleNames.Equals(input.MiddleNames))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.FullAddress == input.FullAddress ||
                    (this.FullAddress != null &&
                    this.FullAddress.Equals(input.FullAddress))
                ) && 
                (
                    this.Thoroughfare == input.Thoroughfare ||
                    (this.Thoroughfare != null &&
                    this.Thoroughfare.Equals(input.Thoroughfare))
                ) && 
                (
                    this.LocatorDesignator == input.LocatorDesignator ||
                    (this.LocatorDesignator != null &&
                    this.LocatorDesignator.Equals(input.LocatorDesignator))
                ) && 
                (
                    this.LocatorName == input.LocatorName ||
                    (this.LocatorName != null &&
                    this.LocatorName.Equals(input.LocatorName))
                ) && 
                (
                    this.AddressArea == input.AddressArea ||
                    (this.AddressArea != null &&
                    this.AddressArea.Equals(input.AddressArea))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.PostName == input.PostName ||
                    (this.PostName != null &&
                    this.PostName.Equals(input.PostName))
                ) && 
                (
                    this.PoBox == input.PoBox ||
                    (this.PoBox != null &&
                    this.PoBox.Equals(input.PoBox))
                ) && 
                (
                    this.AdminUnitLevel1 == input.AdminUnitLevel1 ||
                    (this.AdminUnitLevel1 != null &&
                    this.AdminUnitLevel1.Equals(input.AdminUnitLevel1))
                ) && 
                (
                    this.AdminUnitLevel2 == input.AdminUnitLevel2 ||
                    (this.AdminUnitLevel2 != null &&
                    this.AdminUnitLevel2.Equals(input.AdminUnitLevel2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonalId != null)
                {
                    hashCode = (hashCode * 59) + this.PersonalId.GetHashCode();
                }
                if (this.GivenName != null)
                {
                    hashCode = (hashCode * 59) + this.GivenName.GetHashCode();
                }
                if (this.MiddleNames != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleNames.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.Nationality != null)
                {
                    hashCode = (hashCode * 59) + this.Nationality.GetHashCode();
                }
                if (this.FullAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FullAddress.GetHashCode();
                }
                if (this.Thoroughfare != null)
                {
                    hashCode = (hashCode * 59) + this.Thoroughfare.GetHashCode();
                }
                if (this.LocatorDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.LocatorDesignator.GetHashCode();
                }
                if (this.LocatorName != null)
                {
                    hashCode = (hashCode * 59) + this.LocatorName.GetHashCode();
                }
                if (this.AddressArea != null)
                {
                    hashCode = (hashCode * 59) + this.AddressArea.GetHashCode();
                }
                if (this.PostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostCode.GetHashCode();
                }
                if (this.PostName != null)
                {
                    hashCode = (hashCode * 59) + this.PostName.GetHashCode();
                }
                if (this.PoBox != null)
                {
                    hashCode = (hashCode * 59) + this.PoBox.GetHashCode();
                }
                if (this.AdminUnitLevel1 != null)
                {
                    hashCode = (hashCode * 59) + this.AdminUnitLevel1.GetHashCode();
                }
                if (this.AdminUnitLevel2 != null)
                {
                    hashCode = (hashCode * 59) + this.AdminUnitLevel2.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PersonalId (string) maxLength
            if (this.PersonalId != null && this.PersonalId.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalId, length must be less than 40.", new [] { "PersonalId" });
            }

            // GivenName (string) maxLength
            if (this.GivenName != null && this.GivenName.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GivenName, length must be less than 250.", new [] { "GivenName" });
            }

            // MiddleNames (string) maxLength
            if (this.MiddleNames != null && this.MiddleNames.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleNames, length must be less than 250.", new [] { "MiddleNames" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 250.", new [] { "LastName" });
            }

            // Nationality (string) maxLength
            if (this.Nationality != null && this.Nationality.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be less than 3.", new [] { "Nationality" });
            }

            // Nationality (string) minLength
            if (this.Nationality != null && this.Nationality.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be greater than 3.", new [] { "Nationality" });
            }

            // FullAddress (string) maxLength
            if (this.FullAddress != null && this.FullAddress.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullAddress, length must be less than 250.", new [] { "FullAddress" });
            }

            // Thoroughfare (string) maxLength
            if (this.Thoroughfare != null && this.Thoroughfare.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Thoroughfare, length must be less than 40.", new [] { "Thoroughfare" });
            }

            // LocatorDesignator (string) maxLength
            if (this.LocatorDesignator != null && this.LocatorDesignator.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocatorDesignator, length must be less than 10.", new [] { "LocatorDesignator" });
            }

            // LocatorName (string) maxLength
            if (this.LocatorName != null && this.LocatorName.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocatorName, length must be less than 40.", new [] { "LocatorName" });
            }

            // AddressArea (string) maxLength
            if (this.AddressArea != null && this.AddressArea.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressArea, length must be less than 40.", new [] { "AddressArea" });
            }

            // PostCode (string) maxLength
            if (this.PostCode != null && this.PostCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostCode, length must be less than 10.", new [] { "PostCode" });
            }

            // PostName (string) maxLength
            if (this.PostName != null && this.PostName.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostName, length must be less than 40.", new [] { "PostName" });
            }

            // PoBox (string) maxLength
            if (this.PoBox != null && this.PoBox.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PoBox, length must be less than 10.", new [] { "PoBox" });
            }

            // AdminUnitLevel1 (string) maxLength
            if (this.AdminUnitLevel1 != null && this.AdminUnitLevel1.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminUnitLevel1, length must be less than 3.", new [] { "AdminUnitLevel1" });
            }

            // AdminUnitLevel1 (string) minLength
            if (this.AdminUnitLevel1 != null && this.AdminUnitLevel1.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminUnitLevel1, length must be greater than 3.", new [] { "AdminUnitLevel1" });
            }

            // AdminUnitLevel2 (string) maxLength
            if (this.AdminUnitLevel2 != null && this.AdminUnitLevel2.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdminUnitLevel2, length must be less than 40.", new [] { "AdminUnitLevel2" });
            }

            yield break;
        }
    }

}
