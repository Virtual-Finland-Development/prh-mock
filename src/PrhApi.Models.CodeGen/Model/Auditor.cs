/*
 * PRH mock API
 *
 * API definition for PRH mock API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrhApi.Models.CodeGen.Client.OpenAPIDateConverter;

namespace PrhApi.Models.CodeGen.Model
{
    /// <summary>
    /// Auditor
    /// </summary>
    [DataContract(Name = "Auditor")]
    public partial class Auditor : IEquatable<Auditor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auditor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auditor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auditor" /> class.
        /// </summary>
        /// <param name="companyName">companyName (required).</param>
        /// <param name="nationalIdentifier">nationalIdentifier (required).</param>
        /// <param name="givenName">givenName.</param>
        /// <param name="lastName">lastName.</param>
        public Auditor(string companyName = default(string), string nationalIdentifier = default(string), string givenName = default(string), string lastName = default(string))
        {
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new ArgumentNullException("companyName is a required property for Auditor and cannot be null");
            }
            this.CompanyName = companyName;
            // to ensure "nationalIdentifier" is required (not null)
            if (nationalIdentifier == null)
            {
                throw new ArgumentNullException("nationalIdentifier is a required property for Auditor and cannot be null");
            }
            this.NationalIdentifier = nationalIdentifier;
            this.GivenName = givenName;
            this.LastName = lastName;
        }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", IsRequired = true, EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets NationalIdentifier
        /// </summary>
        [DataMember(Name = "nationalIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string NationalIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name = "givenName", EmitDefaultValue = false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Auditor {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  NationalIdentifier: ").Append(NationalIdentifier).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auditor);
        }

        /// <summary>
        /// Returns true if Auditor instances are equal
        /// </summary>
        /// <param name="input">Instance of Auditor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auditor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.NationalIdentifier == input.NationalIdentifier ||
                    (this.NationalIdentifier != null &&
                    this.NationalIdentifier.Equals(input.NationalIdentifier))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.NationalIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.NationalIdentifier.GetHashCode();
                }
                if (this.GivenName != null)
                {
                    hashCode = (hashCode * 59) + this.GivenName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 250.", new [] { "CompanyName" });
            }

            // NationalIdentifier (string) maxLength
            if (this.NationalIdentifier != null && this.NationalIdentifier.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NationalIdentifier, length must be less than 40.", new [] { "NationalIdentifier" });
            }

            yield break;
        }
    }

}
