using System.Text.RegularExpressions;

namespace PrhApi.Domain;

public static partial class FinnishBusinessId
{
    public static string Generate()
    {
        var random = new Random();
        // First digit is always 1, 2 or 7
        var firstDigit = random.Next(3) switch
        {
            0 => 1,
            1 => 2,
            2 => 7,
            _ => throw new InvalidOperationException("Unexpected value generated by Random.Next()")
        };

        // Second to seventh digits are random
        var digits = new int[6];
        for (var i = 0; i < digits.Length; i++) digits[i] = random.Next(10);

        // Calculate the checksum
        var sum = firstDigit * 7 + digits[0] * 9 + digits[1] * 10 + digits[2] * 5 + digits[3] * 8 + digits[4] * 4 +
                  digits[5] * 2;
        var checksum = sum % 11 == 0 ? 0 : 11 - sum % 11;

        // Construct the final ID string
        return $"{firstDigit}{string.Join("", digits)}-{checksum}";
    }

    public static bool Validate(string businessId)
    {
        // Check that the business ID is exactly 9 characters long
        if (businessId.Length != 9) return false;

        var pattern = BusinessIdRegex();
        if (!pattern.Match(businessId).Success) return false;

        // Calculate the checksum and compare it to the last digit of the ID
        var digits = businessId.Replace("-", "").Take(8).Select(c => int.Parse(c.ToString())).ToArray();
        var sum = digits[0] * 7 + digits[1] * 9 + digits[2] * 10 + digits[3] * 5 + digits[4] * 8 + digits[5] * 4 +
                  digits[6] * 2;
        var checksum = sum % 11 == 0 ? 0 : 11 - sum % 11;

        return checksum == digits[7];
    }

    [GeneratedRegex("\\d{7}-\\d")]
    private static partial Regex BusinessIdRegex();
}
